import * as Validated from "./{{{validated}}}";
import * as Partial from "./{{{partial}}}";
import * as Resolved from "./{{{resolved}}}";
import * as References from "./{{{references}}}";
import * as Util from "./{{{utilDir}}}";

export class Resolver {
    readonly success = new Util.Event<References.ResolutionSuccessData>();
    readonly failure = new Util.Event<References.ResolutionFailureData>();

    private readonly validatedReferences: References.ValidatedReferences = References.initValidatedReferences();
    readonly partialReferences: References.PartialReferences = References.initPartialReferences();

    add(data: References.ValidationSuccessData): void {
        this.validatedReferences[data.reference][data.key] = data.instance;
    }

    resolve(): void {
    {{#referencesData}}
        const validated_{{{name}}} = this.validatedReferences.{{{name}}};
        const partial_{{{name}}} = this.partialReferences.{{{name}}};
        for (const key in validated_{{{name}}}) {
            partial_{{{name}}}[key] = Partial.{{{initializer}}}(validated_{{{name}}}[key]);
        }
    {{/referencesData}}

    {{#referencesData}}
        for (const key in validated_{{{name}}}) {
            const partial = Partial.{{{resolver}}}(partial_{{{name}}}[key], validated_{{{name}}}[key], this.partialReferences);
            if (partial instanceof {{{internalPrefix}}}Util.ResolutionError) {
                this.failure.emit({
                    reference: "{{{name}}}",
                    key,
                    error: partial,
                });
            } else {
                partial_{{{name}}}[key] = partial;
                this.success.emit({
                    reference: "{{{name}}}",
                    key,
                    instance: <Resolved.{{{type}}}> partial,
                });
            }
        }
    {{/referencesData}}
    }
}
