export type {{{name}}} = undefined | {
{{#properties}}
    {{{name}}}: {{{type}}},
{{/properties}}
};

export function {{{initializer}}}(validated: {{{internalPrefix}}}Validated.{{{name}}}): {{{name}}} {
    return {
{{#properties}}
        {{{name}}}: {{{initializer}}}(validated.{{{name}}}),
{{/properties}}
    };
}

export function {{{resolver}}}(dest: {{{name}}}, src: {{{internalPrefix}}}Validated.{{{name}}}, partialReferences: {{{internalPrefix}}}References.PartialReferences): {{{name}}} | {{{internalPrefix}}}Util.ResolutionError {
    {{{internalPrefix}}}assert.ok(typeof dest !== "undefined");
{{#properties}}
    const partial_{{{name}}} = {{{resolver}}}(dest.{{{name}}}, src.{{{name}}}, partialReferences);
    if (partial_{{{name}}} instanceof {{{internalPrefix}}}Util.ResolutionError) return new {{{internalPrefix}}}Util.ResolutionError(`Error encountered resolving property: [{{{name}}}]`, partial_{{{name}}});
    dest.{{{name}}} = partial_{{{name}}};
{{/properties}}
    return dest;
}
