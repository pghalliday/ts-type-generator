export type {{{name}}} = undefined | {{{type}}}[];

export function {{{initializer}}}(validated: {{{internalPrefix}}}Validated.{{{name}}}): {{{name}}} {
    const value: {{{name}}} = [];
    for (const item of validated) {
        value.push({{{typeInitializer}}}(item));
    }
    return value;
}

export function {{{resolver}}}(dest: {{{name}}}, src: {{{internalPrefix}}}Validated.{{{name}}}, resolvedReferences: {{{internalPrefix}}}References.ResolvedReferences): {{{name}}} | {{{internalPrefix}}}Util.ResolutionError {
    {{{internalPrefix}}}assert.ok(typeof dest !== "undefined");
    for (const index in src) {
        const resolved = {{{typeResolver}}}(dest[index], src[index], resolvedReferences);
        if (resolved instanceof {{{internalPrefix}}}Util.ResolutionError) return new {{{internalPrefix}}}Util.ResolutionError(`Error encountered resolving index: [${index}]`, resolved);
        dest[index] = resolved;
    }
    return dest;
}
